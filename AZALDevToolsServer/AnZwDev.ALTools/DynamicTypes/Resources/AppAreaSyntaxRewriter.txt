using Microsoft.Dynamics.Nav.CodeAnalysis;
using Microsoft.Dynamics.Nav.CodeAnalysis.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AnZwDev.ALTools.DynamicTypes.Resources
{
    public class AppAreaSyntaxRewriter : SyntaxRewriter
    {

        public AppAreaSyntaxRewriter(bool visitIntoStructuredTrivia = false) : base(visitIntoStructuredTrivia)
        {
        }

        public override SyntaxNode VisitPageField(PageFieldSyntax node)
        {
            PropertySyntax property = CreateMissingApplicationArea(node);
            if (property != null)
                return node.AddPropertyListProperties(property);
            return base.VisitPageField(node);
        }

        public override SyntaxNode VisitPageUserControl(PageUserControlSyntax node)
        {
            PropertySyntax property = CreateMissingApplicationArea(node);
            if (property != null)
                return node.AddPropertyListProperties(property);
            return base.VisitPageUserControl(node);
        }

        public override SyntaxNode VisitPageChartPart(PageChartPartSyntax node)
        {
            PropertySyntax property = CreateMissingApplicationArea(node);
            if (property != null)
                return node.AddPropertyListProperties(property);
            return base.VisitPageChartPart(node);
        }

        public override SyntaxNode VisitPagePart(PagePartSyntax node)
        {
            PropertySyntax property = CreateMissingApplicationArea(node);
            if (property != null)
                return node.AddPropertyListProperties(property);
            return base.VisitPagePart(node);
        }

        public override SyntaxNode VisitPageSystemPart(PageSystemPartSyntax node)
        {
            PropertySyntax property = CreateMissingApplicationArea(node);
            if (property != null)
                return node.AddPropertyListProperties(property);
            return base.VisitPageSystemPart(node);
        }

        public override SyntaxNode VisitPageAction(PageActionSyntax node)
        {
            PropertySyntax property = CreateMissingApplicationArea(node);
            if (property != null)
                return node.AddPropertyListProperties(property);
            return base.VisitPageAction(node);
        }

        private PropertySyntax CreateMissingApplicationArea(SyntaxNode node)
        {
            PropertySyntax property = node.GetProperty("ApplicationArea");
            if ((property == null) || (String.IsNullOrWhiteSpace(property.Value.ToString())))
            {
                SeparatedSyntaxList<IdentifierNameSyntax> list = new SeparatedSyntaxList<IdentifierNameSyntax>();
                list = list.Add(SyntaxFactory.IdentifierName("Basic"));

                property = SyntaxFactory.Property(PropertyKind.ApplicationArea,
                    SyntaxFactory.CommaSeparatedPropertyValue(list));

                int indentLength = 4;
                string indent;
                SyntaxTriviaList leadingTrivia = node.GetLeadingTrivia();
                if (leadingTrivia != null)
                {
                    indent = leadingTrivia.ToString();
                    int newLinePos = indent.LastIndexOf("/n");
                    if (newLinePos >= 0)
                        indent = indent.Substring(newLinePos + 1);
                    indentLength += indent.Length;
                }
                indent = "".PadLeft(indentLength);

                property = property
                    .WithLeadingTrivia(SyntaxFactory.ParseLeadingTrivia(indent))
                    .WithTrailingTrivia(SyntaxFactory.ParseTrailingTrivia("\r\n"));

                return property;
            }
            return null;
        }


    }
}
